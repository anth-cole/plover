-- fmap pretty $ parseFile "src/quotetests.txt"
-- fmap toPosGraph $ parseFile "src/quotetests.txt"

extern GPS_OMEGAE_DOT :: Double;
extern GPS_C :: Double;

extern struct navigation_measurement_t (
  pseudorange :: Double;
);

m := vec(vec(1, 2),
         vec(3, 4));

pvt {n_used :: u8}
    (sat_pos :: double[n_used, 3])
    (pseudo :: double[n_used])
    (nav_meas :: navigation_measurement_t[n_used])
    (rx_state :: double[3])
    (correction :: double[4])
    (G :: double[n_used, 3+1])
    (X :: double[4, n_used])
  :: Void
 := ( los := vec j in 0:n_used -> ( tau := norm (rx_state - sat_pos[j, :]) / GPS_C;
                                    we_tau := GPS_OMEGAE_DOT * tau;
                                    xk_new := rot_small we_tau * sat_pos[j, :];
                                    xk_new - rx_state );
      G <- vec j in 0:n_used -> normalize((-los)[j] # vec(1));
      pseudo := vec j in 0:n_used -> nav_meas[i].pseudorange;
      omp := pseudo - vec j in 0:n_used -> norm los[j];
      X <- inverse (transpose G * G) * transpose G;
      correction <- X * omp;
      Void );

struct pair (
  a :: double;
  b :: double;
);

struct var_array (
  n :: u16;
  A :: double[n];
  ptr :: *u16;
);

foo (x :: double[2,2]) :: Void
  := (x <- vec i in 0:2, j in 0:1 -> i + j);

my_matrix := vec i in 0:22, j in 0:22 -> f i + j*j;

a := (vec i in 22 -> i) + (vec j in 22 -> j);

foo2 (s :: var_array) :: u16  := s.*ptr;

vec i in 3 -> i + 3;

x := 2;

dot {n} (a :: double[n]) (b :: double[n]) :: double  := (a^T * b)[0,0];

x := f $ 1 + 2;


book_algorithm {n :: u16} c r alpha (d :: double[n]) (g :: double[n]) (f :: double[n])
  :: Void
:= (
  gamma := 1/c * R + 1 / c * (1-c) * g * f + g[1] * f[1];
  Dbar[1] := D[1] * R / gamma;
  k := g[1] # zeros (n - 1);
  ubar := UpperUnitTriangular(vec i in 0:n, j in 0:n -> 0);
  s := c / alpha * (r + (1-c) * g * f);
  for j in 2:n -> (
    gamma_last := gamma;
    gamma <- gamma + g[j] * f[j];
    Dbar[j] <- D[j] * gamma_last / gamma;
    ubar[:,j] <- u[j] - (f[j] / gamma_last) * k;
    k[0:j-1] <- k[0:j-1] + g[j] * u[j,0:j-1];
  );
);

_x := 2;


D := diag(something);
U := UpperTriangular(something);
P := U * D * U^T;
S := R + H * P * H^T;
y := z - H * x;
S[i,i] <- R[i,i] + sum k in _ -> (H * U)[i,k]^2 * D[k,k];
SOS := sum i -> y[i]^2 / S[i,i];

A := H * U;
S := R + A * D * A^T;

diag {n} (A :: double[n,n]) :: double
  := vec i in n -> A[i,i];


{-

static double get_sos_innov(nkf_t *kf, double *decor_obs)
{
 double predicted_obs[kf->obs_dim];
 matrix_multiply(kf->obs_dim, kf->state_dim, 1,
                 kf->decor_obs_mtx, kf->state_mean, predicted_obs);
 double hu[kf->obs_dim * kf->state_dim];
 /* TODO use the fact that U is unit triangular to save a ton of time */
 matrix_multiply(kf->obs_dim, kf->state_dim, kf->state_dim,
                 kf->decor_obs_mtx, kf->state_cov_U, hu);
 /* (H * U * D * U^T * H^T)_ii = (HU * D * HU^T)_ii
  *                            = Sum_kl (HU_ik * D_kl * HU^T_li)
  *                            = Sum_kl (HU_ik * D_kl * HU_il)
  *                            = Sum_k (HU_ik * D_kk * HU_ik) */
 double sos = 0;
 for (u8 i=0; i < kf->obs_dim; i++) {
   double hph_r_ii = kf->decor_obs_cov[i];
   for (u8 k=0; i < kf->state_dim; k++) {
     hph_r_ii += hu[i * kf->state_dim + k] *
                 hu[i * kf->state_dim + k] *
                 kf->state_cov_D[k];
   }
   sos += (predicted_obs[i] - decor_obs[i]) *
          (predicted_obs[i] - decor_obs[i]) /
          hph_r_ii;
 }
 return sos;
}
-}
