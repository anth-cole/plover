import prelude;
import qr;
import util;

-- WARNING do not use eye or zero in a general direct assignment.
-- Correct code will only be generated if used within
-- an expression, or assigned to a Scalar location.
eye  {m} :: Scalar double[m,m] := scalar 1.0;
zero {m} :: Scalar double[m,m] := scalar 0.0;

kalman_init_
  (out state :: filter_state)
  :: () := (
  state.num_sats <- 0;
  state.x <- 0.0;
  position_covariance :: double[state.num_sats + 3, state.num_sats + 3];
  position_covariance <- 0.0;
  state.P <- position_covariance;
);

kalman_predict_ {dim}
  (x :: double[dim])
  (P :: double[dim, dim])
  (F :: double[dim, dim])
  (Q :: double[dim, dim])
  (out x_new :: double[dim])
  (out P_new :: double[dim, dim])
  :: () := (
  P_new <- F * P * F^T + Q;
  x_new <- F * x;
);

kalman_update_ {xdim, dim}
  (x :: double[xdim])
  (P :: double[xdim, xdim])
  (y :: double[dim])
  (H :: double[dim, xdim])
  (R :: double[dim, dim])
  (out x_new :: double[xdim])
  (out P_new :: double[xdim, xdim])
  :: () := (

  innovation := y - H * x;
  PHt := P * H^T;
  S := H * PHt + R;
  K := PHt * S^(-1) :: double[xdim, dim];

  x_new <- x + K * innovation;
  P_new <- (eye () - K * H) * P;
);

omega_dot_unit_vector {sats, dim}
  (base_pos :: double[dim])
  (sat_positions :: double[sats, dim])
  (estimate :: double[dim])
  :: double[sats, dim] := (

  vec i in sats -> (
    h := sat_positions[i] - base_pos;
    omega := norm h + norm (h - estimate);
    (2*h - estimate) / omega
  );
);

observation_model_ {sats}
  (pseudoranges :: double[sats])
  (carrier_phases :: double[sats])
  (x :: double[3+sats])
  (base_pos :: double[3])
  (sat_positions :: double[sats, 3])

  (sig_cp :: double)
  (sig_pr :: double)

  (out y :: double[2*(sats-1)])
  (out H :: double[2*(sats-1), 3+(sats-1)])
  (out R :: double[2*(sats-1), 2*(sats-1)])
  :: () := (

  E :: double[sats, 3];
  E <- (omega_dot_unit_vector base_pos sat_positions x[0:3]) / GPS_L1_LAMBDA;

  u :: double[sats];
  u <- -1.0 / sqrt sats;
  u[0] <- u[0] + 1;

  P_bar :: double[sats-1, sats];
  P_bar <- (eye() - 2 * (u * u^T) / (u * u))[1:];

  F := eye{sats-1} - (1 / (sats - sqrt sats));

  sig_ratio := sig_cp / (sig_pr / GPS_L1_LAMBDA);

  -- Outputs
  y <- (P_bar * carrier_phases) #
         (sig_ratio * P_bar * pseudoranges / GPS_L1_LAMBDA);

  -- block: [PE, F; sig_ratio*PE, 0]
  PE := P_bar * E;
  H <- ((PE^T # F^T)^T # ((sig_ratio * PE^T) # zero())^T);

  R <- 4 * sig_cp * eye();
);

--intersect obs set on prn, computer sdiffs
--if ref is gone -> drop_sat, choose_ref
--new sats -> add_sat
--new ref -> change_ref
update {base_dim, rover_dim}
  (inout filter_state :: filter_state)
  (rover :: measurement[rover_dim])
  (base  :: measurement[base_dim])
  :: () := (
  -- TODO
);
